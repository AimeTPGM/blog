---
layout: post 
series: Others
topic:  หั่นโค้ดยังไง ไม่ให้อ้วก
subtitle: "Better way to serve the code"
description: ""
createdDate: 2019-05-12 06:20 +0700
lastModifiedDate: 2019-05-12 06:55 +0700
categories: web
tags: [coding journey, code refactor]
---
{% include hidden-thumbnail.html image="/blog/assets/img/2019/05/12/journey/thumbnail.png" %}

บล็อกนี้ขอเริ่มต้นด้วยคำถามสักข้อนึงก่อน 

{% include focus-text-lvl1.html content="สงสัยไหม ทำไมต้องหั่นโค้ด?" %} 

เคยไหม ที่จะต้องอ่านโค้ดหน้านึงยาวเป็นร้อยๆบรรทัด?

แล้วแฮปปี้ไหม กับการอ่านโค้ดแบบนั้น?

ถ้าคำตอบในใจคือไม่แฮปปี้ ... วันนี้คุณเปิดมาถูกบล็อกแล้ว

----

เราอาจเคยได้ยินคำว่า {% include focus-text.html content="Separation of Concerns" %} ในวงการโปรแกรมมิ่ง

มันคือการหั่นโค้ดออกมาเป็นชิ้นย่อยๆเล็กๆ ให้ต่างโค้ดต่างทำงานตามหน้าที่ของมัน เพื่อให้ดูแลโค้ดได้ง่ายขึ้น แก้ง่ายขึ้น และเพิ่มโค้ดได้ง่ายขึ้น

พออะไรๆก็ง่าย เดฟก็เขียนโค้ดได้อย่างมีความสุข ไม่ต้องมานั่งหงุดหงิด เวลานั่งทำงานหรือแก้บั้ค แล้วจะต้องวิ่งไล่โค้ดที่ยาวววววเป็นหางว่าว 

<b>ยิ่งโค้ดยาว ยิ่งอ่านยาก</b>

<b>ยิ่งโค้ดเยอะ ยิ่งเข้าใจยาก</b>

จะดีกว่าไหม ถ้าเราตัดแบ่งโค้ดยาวๆ ให้มันสั้นลง จนมันเล็กพอที่จะอ่านและทำความเข้าใจได้ง่าย

<b>ยิ่งโค้ดเข้าใจง่าย ยิ่งทำงานเสร็จได้เร็ว</b>

ไม่ว่าจะเป็นโปรเจ็คทำคนเดียวหรือโปรเจ็คที่ทำกับทีม

{% include focus-text-lvl1.html content="แต่การหั่นโค้ด ... ก็ไม่ใช่สักแต่จะหั่น" %} 

ถ้าเราหั่นซอยยิบย่อยจนเกินไป ถ้าเราพยายามแยกทุกอย่างออกจากกัน อาจจะทำให้ยิ่งทำงานยากขึ้นไปอีก 

แล้วเมื่อไหร่ถึงรู้ว่าเราหั่นโค้ด<u>ยิบย่อยจนเกินไป</u>?

เอาง่ายๆ ... ก็ถ้าต้องแก้โค้ดจากไฟล์นึง แล้วต้องไปเปิดอีกไฟล์นึง แล้วไปเปิดเพิ่มอีกไฟล์นึง แล้ววนกลับมาไฟล์นึง  เพื่อที่จะเข้าใจโค้ดแค่ก้อนเดียว 

แบบเนี้ย ... หั่นโค้ดเยอะไป <b>เยอะจนจนมานั่งเสียเวลาทำความเข้าใจโค้ดทีหลัง มากกว่าตอนที่โค้ดอยู่รวมกันที่เดียว</b>

ก่อนจะหั่นโค้ด ลองชั่งน้ำหนักดีๆ ด้วยการถามตัวเองด้วยคำถามง่ายๆ 3 ข้อ
- หั่นโค้ดส่วนนั้นออกไป แล้วชีวิตง่ายขึ้นไหม ช่วยประหยัดเวลาในการทำความเข้าใจโค้ดรึเปล่า ทั้งตัวเรา ทั้งคนในทีม
- การเพิ่มโค้ด ลบโค้ด หรือแก้ไขโค้ดใดๆ หลังจากหั่นโค้ด ทำแล้วยังมีความสุขดีอยู่รึเปล่า หรือต้องมานั่งระแวงว่าเพิ่ม ลด แก้จะทำให้โค้ดที่ไหนสักที่พัง
- ถ้าเกิดบั้คในหน้าที่เราจะหั่นหรือหั่นออกไป การหั่นจะช่วยทำให้หาบั้คง่ายรึเปล่า (รู้เลยว่าอยู่โค้ดไฟล์ไหน ตรงไหน รับค่าจากที่อื่นมาไหม รับค่าอะไร แล้วเอาไปใช้ที่ไหน)

ถ้าคำตอบเป็น positive ทั้ง 3 ข้อ ก็มีเปอร์เซ็นสูงที่การตัดสินใจหั่นโค้ดครั้งนี้ <u>อาจจะ</u>เป็นเรื่องที่ถูกต้อง 

เพราะถึงจะตอบเป็น positive ทั้ง 3 ข้อ พอถึงจุดนึง โค้ดที่เคยหั่นออกมา อาจจะถูกแก้จนกลายเป็นโค้ดที่ยุ่งยากในภายหลังได้เหมือนกัน

{% include focus-text.html content="แต่ถ้าคำตอบเป็น negative แม้แต่ข้อเดียว" %} ลองคิดใหม่อีกที 

เพราะบางทีแค่การหั่นโค้ดอาจจะไม่ใช้คำตอบและไม่ได้ช่วยลดเวลาในการทำความเข้าใจโค้ดสักเท่าไหร่

-----

การหั่นโค้ดให้สั้น อาจจะช่วยทำให้ดูแลโค้ดได้ง่ายขึ้นบ้างก็จริง แต่ ...

{% include focus-text-lvl1.html content="Good smell is good. Bad smell is bad." %} 

{% include focus-text.html content="ถ้าโค้ดมันเหม็นตุๆอยู่แล้ว การหั่นโค้ดอาจจะยิ่งเหมือนเปลี่ยนจากขยะชิ้นๆให้กลายเป็นขยะมูลฝอย" %} กลิ่นตุๆก็ยังคงอยู่ ลอยคลุ้งไปมา แถมจัดการยากกว่าเดิม

{% include focus-text.html content="แต่ถ้าโค้ดกลิ่นหอมเหมือนสเต็กชั้นดี การแบ่งชิ้นในขนาดที่พอเหมาะ ก็เหมือนกับการเสิร์ฟสเต็กลงบนจานพร้อมเสิร์ฟในร้านอาหารชั้นเยี่ยม" %}

ดังนั้น ก่อนจะหั่นโค้ดออกไป อย่าลืมดู {% include focus-text.html content="โค้ดที่มีอยู่ เรียกว่า สเต็กชั้นดีได้รึยัง" %}

ถ้ายัง การหั่นครั้งนี้ ต้องทำไปพร้อมๆกับการปรุงโค้ด ให้หอมอร่อยเหมือนสเต็กชั้นเลิศ พร้อมเสิร์ฟ น่ารับประทาน

ถ้าเรารู้อยู่แก่ใจ ว่าโค้ดที่เคยเขียนไว้ มีกลิ่นตุๆแล้ว แต่ยังฝืนหั่นและไม่ปรุงใหม่ ยิ่งหั่น จะยิ่งทำให้โค้ดมีกลิ่นตุๆเพิ่มมากขึ้นไปอีก

ดังนั้น "มีสติทุกครั้งเวลาเขียนโค้ด" และ "มีสติทุกครั้งเวลาหั่นโค้ด"

ท่อง 3 คาถานี้ไว้ในใจเสมอเมื่อจับคีย์บอร์ด

{% include focus-text-lvl1.html content="Separation of Concerns," %}

{% include focus-text-lvl1.html content="Don't Repeat Yourself," %}

{% include focus-text-lvl1.html content="Keep it simple and stupid" %}

ที่เหลือคือ ฝึก ฝึก ฝึก 

วันนึงเราจะเริ่มเขียนโค้ดและหั่นโค้ดได้หอมและอร่อยขึ้นแน่นอน

{% include signature.html %}